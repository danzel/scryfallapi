package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/satori/go.uuid"
)

// CardsClient is the client for the Cards methods of the  service.
type CardsClient struct {
    BaseClient
}
// NewCardsClient creates an instance of the CardsClient client.
func NewCardsClient() CardsClient {
    return NewCardsClientWithBaseURI(DefaultBaseURI, )
}

// NewCardsClientWithBaseURI creates an instance of the CardsClient client.
    func NewCardsClientWithBaseURI(baseURI string, ) CardsClient {
        return CardsClient{ NewWithBaseURI(baseURI, )}
    }

// AutocompleteMethod sends the autocomplete request.
    //
func (client CardsClient) AutocompleteMethod(ctx context.Context, q string) (result CatalogType, err error) {
    req, err := client.AutocompleteMethodPreparer(ctx, q)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "AutocompleteMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.AutocompleteMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "AutocompleteMethod", resp, "Failure sending request")
        return
        }

        result, err = client.AutocompleteMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "AutocompleteMethod", resp, "Failure responding to request")
        }

    return
    }

    // AutocompleteMethodPreparer prepares the AutocompleteMethod request.
    func (client CardsClient) AutocompleteMethodPreparer(ctx context.Context, q string) (*http.Request, error) {
                queryParameters := map[string]interface{} {
        "q": autorest.Encode("query",q),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/cards/autocomplete"),
    autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // AutocompleteMethodSender sends the AutocompleteMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) AutocompleteMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // AutocompleteMethodResponder handles the response to the AutocompleteMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) AutocompleteMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetAllMethod sends the get all request.
    //
func (client CardsClient) GetAllMethod(ctx context.Context, page *int32) (result CardListType, err error) {
    req, err := client.GetAllMethodPreparer(ctx, page)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "GetAllMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetAllMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetAllMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetAllMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetAllMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetAllMethodPreparer prepares the GetAllMethod request.
    func (client CardsClient) GetAllMethodPreparer(ctx context.Context, page *int32) (*http.Request, error) {
                queryParameters := map[string]interface{} {
        }
            if page != nil {
            queryParameters["page"] = autorest.Encode("query",*page)
            }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/cards"),
    autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetAllMethodSender sends the GetAllMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) GetAllMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetAllMethodResponder handles the response to the GetAllMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) GetAllMethodResponder(resp *http.Response) (result CardListType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetByCodeByNumberMethod sends the get by code by number request.
    //
func (client CardsClient) GetByCodeByNumberMethod(ctx context.Context, code string, number int32) (result CardType, err error) {
    req, err := client.GetByCodeByNumberMethodPreparer(ctx, code, number)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "GetByCodeByNumberMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByCodeByNumberMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetByCodeByNumberMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByCodeByNumberMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetByCodeByNumberMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByCodeByNumberMethodPreparer prepares the GetByCodeByNumberMethod request.
    func (client CardsClient) GetByCodeByNumberMethodPreparer(ctx context.Context, code string, number int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "code": autorest.Encode("path",code),
        "number": autorest.Encode("path",number),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/cards/{code}/{number}",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByCodeByNumberMethodSender sends the GetByCodeByNumberMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) GetByCodeByNumberMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByCodeByNumberMethodResponder handles the response to the GetByCodeByNumberMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) GetByCodeByNumberMethodResponder(resp *http.Response) (result CardType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetByIDMethod sends the get by id request.
    //
func (client CardsClient) GetByIDMethod(ctx context.Context, ID uuid.UUID) (result CardType, err error) {
    req, err := client.GetByIDMethodPreparer(ctx, ID)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "GetByIDMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByIDMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetByIDMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByIDMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetByIDMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByIDMethodPreparer prepares the GetByIDMethod request.
    func (client CardsClient) GetByIDMethodPreparer(ctx context.Context, ID uuid.UUID) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/cards/{id}",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByIDMethodSender sends the GetByIDMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) GetByIDMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByIDMethodResponder handles the response to the GetByIDMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) GetByIDMethodResponder(resp *http.Response) (result CardType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetByMtgoIDMethod sends the get by mtgo id request.
    //
func (client CardsClient) GetByMtgoIDMethod(ctx context.Context, ID int32) (result CardType, err error) {
    req, err := client.GetByMtgoIDMethodPreparer(ctx, ID)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "GetByMtgoIDMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByMtgoIDMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetByMtgoIDMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByMtgoIDMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetByMtgoIDMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByMtgoIDMethodPreparer prepares the GetByMtgoIDMethod request.
    func (client CardsClient) GetByMtgoIDMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/cards/mtgo/{id}",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByMtgoIDMethodSender sends the GetByMtgoIDMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) GetByMtgoIDMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByMtgoIDMethodResponder handles the response to the GetByMtgoIDMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) GetByMtgoIDMethodResponder(resp *http.Response) (result CardType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetByMultiverseIDMethod sends the get by multiverse id request.
    //
func (client CardsClient) GetByMultiverseIDMethod(ctx context.Context, ID int32) (result CardType, err error) {
    req, err := client.GetByMultiverseIDMethodPreparer(ctx, ID)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "GetByMultiverseIDMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByMultiverseIDMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetByMultiverseIDMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByMultiverseIDMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetByMultiverseIDMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByMultiverseIDMethodPreparer prepares the GetByMultiverseIDMethod request.
    func (client CardsClient) GetByMultiverseIDMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/cards/multiverse/{id}",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByMultiverseIDMethodSender sends the GetByMultiverseIDMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) GetByMultiverseIDMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByMultiverseIDMethodResponder handles the response to the GetByMultiverseIDMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) GetByMultiverseIDMethodResponder(resp *http.Response) (result CardType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetNamedMethod sends the get named request.
    //
func (client CardsClient) GetNamedMethod(ctx context.Context, exact string, fuzzy string, set string, formatParameter string, face string, version string, pretty *bool) (result CardType, err error) {
    req, err := client.GetNamedMethodPreparer(ctx, exact, fuzzy, set, formatParameter, face, version, pretty)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "GetNamedMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetNamedMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetNamedMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetNamedMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetNamedMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetNamedMethodPreparer prepares the GetNamedMethod request.
    func (client CardsClient) GetNamedMethodPreparer(ctx context.Context, exact string, fuzzy string, set string, formatParameter string, face string, version string, pretty *bool) (*http.Request, error) {
                queryParameters := map[string]interface{} {
        }
            if len(exact) > 0 {
            queryParameters["exact"] = autorest.Encode("query",exact)
            }
            if len(fuzzy) > 0 {
            queryParameters["fuzzy"] = autorest.Encode("query",fuzzy)
            }
            if len(set) > 0 {
            queryParameters["set"] = autorest.Encode("query",set)
            }
            if len(formatParameter) > 0 {
            queryParameters["format"] = autorest.Encode("query",formatParameter)
            }
            if len(face) > 0 {
            queryParameters["face"] = autorest.Encode("query",face)
            }
            if len(version) > 0 {
            queryParameters["version"] = autorest.Encode("query",version)
            }
            if pretty != nil {
            queryParameters["pretty"] = autorest.Encode("query",*pretty)
            }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/cards/named"),
    autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetNamedMethodSender sends the GetNamedMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) GetNamedMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetNamedMethodResponder handles the response to the GetNamedMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) GetNamedMethodResponder(resp *http.Response) (result CardType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetRandomMethod sends the get random request.
func (client CardsClient) GetRandomMethod(ctx context.Context) (result CardType, err error) {
    req, err := client.GetRandomMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "GetRandomMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetRandomMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetRandomMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetRandomMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "GetRandomMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetRandomMethodPreparer prepares the GetRandomMethod request.
    func (client CardsClient) GetRandomMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/cards/random"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetRandomMethodSender sends the GetRandomMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) GetRandomMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetRandomMethodResponder handles the response to the GetRandomMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) GetRandomMethodResponder(resp *http.Response) (result CardType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// SearchMethod sends the search request.
    //
    // unique is  order is  dir is
func (client CardsClient) SearchMethod(ctx context.Context, q string, unique UniqueStrategyEnum, order SortOrderEnum, dir SortDirectionEnum, includeExtras *bool, page *int32) (result CardListType, err error) {
    req, err := client.SearchMethodPreparer(ctx, q, unique, order, dir, includeExtras, page)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CardsClient", "SearchMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.SearchMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CardsClient", "SearchMethod", resp, "Failure sending request")
        return
        }

        result, err = client.SearchMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CardsClient", "SearchMethod", resp, "Failure responding to request")
        }

    return
    }

    // SearchMethodPreparer prepares the SearchMethod request.
    func (client CardsClient) SearchMethodPreparer(ctx context.Context, q string, unique UniqueStrategyEnum, order SortOrderEnum, dir SortDirectionEnum, includeExtras *bool, page *int32) (*http.Request, error) {
                queryParameters := map[string]interface{} {
        "q": autorest.Encode("query",q),
        }
            if len(string(unique)) > 0 {
            queryParameters["unique"] = autorest.Encode("query",unique)
            }
            if len(string(order)) > 0 {
            queryParameters["order"] = autorest.Encode("query",order)
            }
            if len(string(dir)) > 0 {
            queryParameters["dir"] = autorest.Encode("query",dir)
            }
            if includeExtras != nil {
            queryParameters["include_extras"] = autorest.Encode("query",*includeExtras)
            }
            if page != nil {
            queryParameters["page"] = autorest.Encode("query",*page)
            }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/cards/search"),
    autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // SearchMethodSender sends the SearchMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CardsClient) SearchMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // SearchMethodResponder handles the response to the SearchMethod request. The method always
    // closes the http.Response Body.
    func (client CardsClient) SearchMethodResponder(resp *http.Response) (result CardListType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

