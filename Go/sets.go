package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
)

// SetsClient is the client for the Sets methods of the  service.
type SetsClient struct {
    BaseClient
}
// NewSetsClient creates an instance of the SetsClient client.
func NewSetsClient() SetsClient {
    return NewSetsClientWithBaseURI(DefaultBaseURI, )
}

// NewSetsClientWithBaseURI creates an instance of the SetsClient client.
    func NewSetsClientWithBaseURI(baseURI string, ) SetsClient {
        return SetsClient{ NewWithBaseURI(baseURI, )}
    }

// GetAllMethod sends the get all request.
func (client SetsClient) GetAllMethod(ctx context.Context) (result SetListType, err error) {
    req, err := client.GetAllMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".SetsClient", "GetAllMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetAllMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".SetsClient", "GetAllMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetAllMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".SetsClient", "GetAllMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetAllMethodPreparer prepares the GetAllMethod request.
    func (client SetsClient) GetAllMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/sets"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetAllMethodSender sends the GetAllMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client SetsClient) GetAllMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetAllMethodResponder handles the response to the GetAllMethod request. The method always
    // closes the http.Response Body.
    func (client SetsClient) GetAllMethodResponder(resp *http.Response) (result SetListType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetByCodeMethod sends the get by code request.
    //
func (client SetsClient) GetByCodeMethod(ctx context.Context, code string) (result SetType, err error) {
    req, err := client.GetByCodeMethodPreparer(ctx, code)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".SetsClient", "GetByCodeMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByCodeMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".SetsClient", "GetByCodeMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByCodeMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".SetsClient", "GetByCodeMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByCodeMethodPreparer prepares the GetByCodeMethod request.
    func (client SetsClient) GetByCodeMethodPreparer(ctx context.Context, code string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "code": autorest.Encode("path",code),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/sets/{code}",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByCodeMethodSender sends the GetByCodeMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client SetsClient) GetByCodeMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByCodeMethodResponder handles the response to the GetByCodeMethod request. The method always
    // closes the http.Response Body.
    func (client SetsClient) GetByCodeMethodResponder(resp *http.Response) (result SetType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

