package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
)

// CatalogClient is the client for the Catalog methods of the  service.
type CatalogClient struct {
    BaseClient
}
// NewCatalogClient creates an instance of the CatalogClient client.
func NewCatalogClient() CatalogClient {
    return NewCatalogClientWithBaseURI(DefaultBaseURI, )
}

// NewCatalogClientWithBaseURI creates an instance of the CatalogClient client.
    func NewCatalogClientWithBaseURI(baseURI string, ) CatalogClient {
        return CatalogClient{ NewWithBaseURI(baseURI, )}
    }

// GetArtifactTypesMethod sends the get artifact types request.
func (client CatalogClient) GetArtifactTypesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetArtifactTypesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetArtifactTypesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetArtifactTypesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetArtifactTypesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetArtifactTypesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetArtifactTypesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetArtifactTypesMethodPreparer prepares the GetArtifactTypesMethod request.
    func (client CatalogClient) GetArtifactTypesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/artifact-types"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetArtifactTypesMethodSender sends the GetArtifactTypesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetArtifactTypesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetArtifactTypesMethodResponder handles the response to the GetArtifactTypesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetArtifactTypesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetCardNamesMethod sends the get card names request.
func (client CatalogClient) GetCardNamesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetCardNamesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetCardNamesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetCardNamesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetCardNamesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetCardNamesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetCardNamesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetCardNamesMethodPreparer prepares the GetCardNamesMethod request.
    func (client CatalogClient) GetCardNamesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/card-names"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetCardNamesMethodSender sends the GetCardNamesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetCardNamesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetCardNamesMethodResponder handles the response to the GetCardNamesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetCardNamesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetCreatureTypesMethod sends the get creature types request.
func (client CatalogClient) GetCreatureTypesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetCreatureTypesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetCreatureTypesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetCreatureTypesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetCreatureTypesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetCreatureTypesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetCreatureTypesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetCreatureTypesMethodPreparer prepares the GetCreatureTypesMethod request.
    func (client CatalogClient) GetCreatureTypesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/creature-types"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetCreatureTypesMethodSender sends the GetCreatureTypesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetCreatureTypesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetCreatureTypesMethodResponder handles the response to the GetCreatureTypesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetCreatureTypesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetEnchantmentTypesMethod sends the get enchantment types request.
func (client CatalogClient) GetEnchantmentTypesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetEnchantmentTypesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetEnchantmentTypesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetEnchantmentTypesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetEnchantmentTypesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetEnchantmentTypesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetEnchantmentTypesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetEnchantmentTypesMethodPreparer prepares the GetEnchantmentTypesMethod request.
    func (client CatalogClient) GetEnchantmentTypesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/enchantment-types"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetEnchantmentTypesMethodSender sends the GetEnchantmentTypesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetEnchantmentTypesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetEnchantmentTypesMethodResponder handles the response to the GetEnchantmentTypesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetEnchantmentTypesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetLandTypesMethod sends the get land types request.
func (client CatalogClient) GetLandTypesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetLandTypesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetLandTypesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetLandTypesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetLandTypesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetLandTypesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetLandTypesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetLandTypesMethodPreparer prepares the GetLandTypesMethod request.
    func (client CatalogClient) GetLandTypesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/land-types"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetLandTypesMethodSender sends the GetLandTypesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetLandTypesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetLandTypesMethodResponder handles the response to the GetLandTypesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetLandTypesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetLoyaltiesMethod sends the get loyalties request.
func (client CatalogClient) GetLoyaltiesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetLoyaltiesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetLoyaltiesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetLoyaltiesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetLoyaltiesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetLoyaltiesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetLoyaltiesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetLoyaltiesMethodPreparer prepares the GetLoyaltiesMethod request.
    func (client CatalogClient) GetLoyaltiesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/loyalties"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetLoyaltiesMethodSender sends the GetLoyaltiesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetLoyaltiesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetLoyaltiesMethodResponder handles the response to the GetLoyaltiesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetLoyaltiesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetPlaneswalkerTypesMethod sends the get planeswalker types request.
func (client CatalogClient) GetPlaneswalkerTypesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetPlaneswalkerTypesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetPlaneswalkerTypesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetPlaneswalkerTypesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetPlaneswalkerTypesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetPlaneswalkerTypesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetPlaneswalkerTypesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetPlaneswalkerTypesMethodPreparer prepares the GetPlaneswalkerTypesMethod request.
    func (client CatalogClient) GetPlaneswalkerTypesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/planeswalker-types"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetPlaneswalkerTypesMethodSender sends the GetPlaneswalkerTypesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetPlaneswalkerTypesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetPlaneswalkerTypesMethodResponder handles the response to the GetPlaneswalkerTypesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetPlaneswalkerTypesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetPowersMethod sends the get powers request.
func (client CatalogClient) GetPowersMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetPowersMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetPowersMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetPowersMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetPowersMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetPowersMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetPowersMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetPowersMethodPreparer prepares the GetPowersMethod request.
    func (client CatalogClient) GetPowersMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/powers"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetPowersMethodSender sends the GetPowersMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetPowersMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetPowersMethodResponder handles the response to the GetPowersMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetPowersMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetSpellTypesMethod sends the get spell types request.
func (client CatalogClient) GetSpellTypesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetSpellTypesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetSpellTypesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSpellTypesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetSpellTypesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetSpellTypesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetSpellTypesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetSpellTypesMethodPreparer prepares the GetSpellTypesMethod request.
    func (client CatalogClient) GetSpellTypesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/spell-types"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSpellTypesMethodSender sends the GetSpellTypesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetSpellTypesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetSpellTypesMethodResponder handles the response to the GetSpellTypesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetSpellTypesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetToughnessesMethod sends the get toughnesses request.
func (client CatalogClient) GetToughnessesMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetToughnessesMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetToughnessesMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetToughnessesMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetToughnessesMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetToughnessesMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetToughnessesMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetToughnessesMethodPreparer prepares the GetToughnessesMethod request.
    func (client CatalogClient) GetToughnessesMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/thoughnesses"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetToughnessesMethodSender sends the GetToughnessesMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetToughnessesMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetToughnessesMethodResponder handles the response to the GetToughnessesMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetToughnessesMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetWatermarksMethod sends the get watermarks request.
func (client CatalogClient) GetWatermarksMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetWatermarksMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetWatermarksMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetWatermarksMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetWatermarksMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetWatermarksMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetWatermarksMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetWatermarksMethodPreparer prepares the GetWatermarksMethod request.
    func (client CatalogClient) GetWatermarksMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/watermarks"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetWatermarksMethodSender sends the GetWatermarksMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetWatermarksMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetWatermarksMethodResponder handles the response to the GetWatermarksMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetWatermarksMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetWordBankMethod sends the get word bank request.
func (client CatalogClient) GetWordBankMethod(ctx context.Context) (result CatalogType, err error) {
    req, err := client.GetWordBankMethodPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".CatalogClient", "GetWordBankMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetWordBankMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetWordBankMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetWordBankMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".CatalogClient", "GetWordBankMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetWordBankMethodPreparer prepares the GetWordBankMethod request.
    func (client CatalogClient) GetWordBankMethodPreparer(ctx context.Context) (*http.Request, error) {
    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPath("/catalog/word-bank"))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetWordBankMethodSender sends the GetWordBankMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client CatalogClient) GetWordBankMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetWordBankMethodResponder handles the response to the GetWordBankMethod request. The method always
    // closes the http.Response Body.
    func (client CatalogClient) GetWordBankMethodResponder(resp *http.Response) (result CatalogType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

