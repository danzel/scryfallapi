package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/satori/go.uuid"
)

// RulingsClient is the client for the Rulings methods of the  service.
type RulingsClient struct {
    BaseClient
}
// NewRulingsClient creates an instance of the RulingsClient client.
func NewRulingsClient() RulingsClient {
    return NewRulingsClientWithBaseURI(DefaultBaseURI, )
}

// NewRulingsClientWithBaseURI creates an instance of the RulingsClient client.
    func NewRulingsClientWithBaseURI(baseURI string, ) RulingsClient {
        return RulingsClient{ NewWithBaseURI(baseURI, )}
    }

// GetByCodeByNumberIDMethod sends the get by code by number id request.
    //
func (client RulingsClient) GetByCodeByNumberIDMethod(ctx context.Context, code string, number int32) (result RulingListType, err error) {
    req, err := client.GetByCodeByNumberIDMethodPreparer(ctx, code, number)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByCodeByNumberIDMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByCodeByNumberIDMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByCodeByNumberIDMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByCodeByNumberIDMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByCodeByNumberIDMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByCodeByNumberIDMethodPreparer prepares the GetByCodeByNumberIDMethod request.
    func (client RulingsClient) GetByCodeByNumberIDMethodPreparer(ctx context.Context, code string, number int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "code": autorest.Encode("path",code),
        "number": autorest.Encode("path",number),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/cards/{code}/{number}/rulings",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByCodeByNumberIDMethodSender sends the GetByCodeByNumberIDMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client RulingsClient) GetByCodeByNumberIDMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByCodeByNumberIDMethodResponder handles the response to the GetByCodeByNumberIDMethod request. The method always
    // closes the http.Response Body.
    func (client RulingsClient) GetByCodeByNumberIDMethodResponder(resp *http.Response) (result RulingListType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetByIDMethod sends the get by id request.
    //
func (client RulingsClient) GetByIDMethod(ctx context.Context, ID uuid.UUID) (result RulingListType, err error) {
    req, err := client.GetByIDMethodPreparer(ctx, ID)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByIDMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByIDMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByIDMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByIDMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByIDMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByIDMethodPreparer prepares the GetByIDMethod request.
    func (client RulingsClient) GetByIDMethodPreparer(ctx context.Context, ID uuid.UUID) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/cards/{id}/rulings",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByIDMethodSender sends the GetByIDMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client RulingsClient) GetByIDMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByIDMethodResponder handles the response to the GetByIDMethod request. The method always
    // closes the http.Response Body.
    func (client RulingsClient) GetByIDMethodResponder(resp *http.Response) (result RulingListType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetByMtgoIDMethod sends the get by mtgo id request.
    //
func (client RulingsClient) GetByMtgoIDMethod(ctx context.Context, ID int32) (result RulingListType, err error) {
    req, err := client.GetByMtgoIDMethodPreparer(ctx, ID)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByMtgoIDMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByMtgoIDMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByMtgoIDMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByMtgoIDMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByMtgoIDMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByMtgoIDMethodPreparer prepares the GetByMtgoIDMethod request.
    func (client RulingsClient) GetByMtgoIDMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/cards/mtgo/{id}/rulings",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByMtgoIDMethodSender sends the GetByMtgoIDMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client RulingsClient) GetByMtgoIDMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByMtgoIDMethodResponder handles the response to the GetByMtgoIDMethod request. The method always
    // closes the http.Response Body.
    func (client RulingsClient) GetByMtgoIDMethodResponder(resp *http.Response) (result RulingListType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

// GetByMultiverseIDMethod sends the get by multiverse id request.
    //
func (client RulingsClient) GetByMultiverseIDMethod(ctx context.Context, ID int32) (result RulingListType, err error) {
    req, err := client.GetByMultiverseIDMethodPreparer(ctx, ID)
    if err != nil {
    err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByMultiverseIDMethod", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetByMultiverseIDMethodSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByMultiverseIDMethod", resp, "Failure sending request")
        return
        }

        result, err = client.GetByMultiverseIDMethodResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".RulingsClient", "GetByMultiverseIDMethod", resp, "Failure responding to request")
        }

    return
    }

    // GetByMultiverseIDMethodPreparer prepares the GetByMultiverseIDMethod request.
    func (client RulingsClient) GetByMultiverseIDMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

    preparer := autorest.CreatePreparer(
    autorest.AsGet(),
    autorest.WithBaseURL(client.BaseURI),
    autorest.WithPathParameters("/cards/multiverse/{id}/rulings",pathParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetByMultiverseIDMethodSender sends the GetByMultiverseIDMethod request. The method will close the
    // http.Response Body if it receives an error.
    func (client RulingsClient) GetByMultiverseIDMethodSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
        autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            }

    // GetByMultiverseIDMethodResponder handles the response to the GetByMultiverseIDMethod request. The method always
    // closes the http.Response Body.
    func (client RulingsClient) GetByMultiverseIDMethodResponder(resp *http.Response) (result RulingListType, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
    }

