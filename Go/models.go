package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
    "github.com/satori/go.uuid"
)

        // BorderColorsEnum enumerates the values for border colors enum.
    type BorderColorsEnum string

    const (
                // Black ...
        Black BorderColorsEnum = "black"
                // Borderless ...
        Borderless BorderColorsEnum = "borderless"
                // Gold ...
        Gold BorderColorsEnum = "gold"
                // Silver ...
        Silver BorderColorsEnum = "silver"
                // White ...
        White BorderColorsEnum = "white"
            )
    // PossibleBorderColorsEnumValues returns an array of possible values for the BorderColorsEnum const type.
    func PossibleBorderColorsEnumValues() []BorderColorsEnum {
        return []BorderColorsEnum{Black,Borderless,Gold,Silver,White}
    }

        // ColorsEnum enumerates the values for colors enum.
    type ColorsEnum string

    const (
                // B ...
        B ColorsEnum = "B"
                // G ...
        G ColorsEnum = "G"
                // R ...
        R ColorsEnum = "R"
                // U ...
        U ColorsEnum = "U"
                // W ...
        W ColorsEnum = "W"
            )
    // PossibleColorsEnumValues returns an array of possible values for the ColorsEnum const type.
    func PossibleColorsEnumValues() []ColorsEnum {
        return []ColorsEnum{B,G,R,U,W}
    }

        // LayoutsEnum enumerates the values for layouts enum.
    type LayoutsEnum string

    const (
                // Augment ...
        Augment LayoutsEnum = "augment"
                // DoubleFacedToken ...
        DoubleFacedToken LayoutsEnum = "double_faced_token"
                // Emblem ...
        Emblem LayoutsEnum = "emblem"
                // Host ...
        Host LayoutsEnum = "host"
                // Leveler ...
        Leveler LayoutsEnum = "leveler"
                // Meld ...
        Meld LayoutsEnum = "meld"
                // Normal ...
        Normal LayoutsEnum = "normal"
                // Planar ...
        Planar LayoutsEnum = "planar"
                // Saga ...
        Saga LayoutsEnum = "saga"
                // Scheme ...
        Scheme LayoutsEnum = "scheme"
                // Split ...
        Split LayoutsEnum = "split"
                // Token ...
        Token LayoutsEnum = "token"
                // Transform ...
        Transform LayoutsEnum = "transform"
                // Vanguard ...
        Vanguard LayoutsEnum = "vanguard"
            )
    // PossibleLayoutsEnumValues returns an array of possible values for the LayoutsEnum const type.
    func PossibleLayoutsEnumValues() []LayoutsEnum {
        return []LayoutsEnum{Augment,DoubleFacedToken,Emblem,Host,Leveler,Meld,Normal,Planar,Saga,Scheme,Split,Token,Transform,Vanguard}
    }

        // LegalStatusEnum enumerates the values for legal status enum.
    type LegalStatusEnum string

    const (
                // Legal ...
        Legal LegalStatusEnum = "legal"
                // NotLegal ...
        NotLegal LegalStatusEnum = "not_legal"
            )
    // PossibleLegalStatusEnumValues returns an array of possible values for the LegalStatusEnum const type.
    func PossibleLegalStatusEnumValues() []LegalStatusEnum {
        return []LegalStatusEnum{Legal,NotLegal}
    }

        // RarityEnum enumerates the values for rarity enum.
    type RarityEnum string

    const (
                // Common ...
        Common RarityEnum = "common"
                // Mythic ...
        Mythic RarityEnum = "mythic"
                // Rare ...
        Rare RarityEnum = "rare"
                // Uncommon ...
        Uncommon RarityEnum = "uncommon"
            )
    // PossibleRarityEnumValues returns an array of possible values for the RarityEnum const type.
    func PossibleRarityEnumValues() []RarityEnum {
        return []RarityEnum{Common,Mythic,Rare,Uncommon}
    }

        // SetTypesEnum enumerates the values for set types enum.
    type SetTypesEnum string

    const (
                // SetTypesEnumArchenemy ...
        SetTypesEnumArchenemy SetTypesEnum = "archenemy"
                // SetTypesEnumBox ...
        SetTypesEnumBox SetTypesEnum = "box"
                // SetTypesEnumCommander ...
        SetTypesEnumCommander SetTypesEnum = "commander"
                // SetTypesEnumConspiracy ...
        SetTypesEnumConspiracy SetTypesEnum = "conspiracy"
                // SetTypesEnumCore ...
        SetTypesEnumCore SetTypesEnum = "core"
                // SetTypesEnumDuelDeck ...
        SetTypesEnumDuelDeck SetTypesEnum = "duel_deck"
                // SetTypesEnumExpansion ...
        SetTypesEnumExpansion SetTypesEnum = "expansion"
                // SetTypesEnumFromTheVault ...
        SetTypesEnumFromTheVault SetTypesEnum = "from_the_vault"
                // SetTypesEnumFunny ...
        SetTypesEnumFunny SetTypesEnum = "funny"
                // SetTypesEnumMasterpiece ...
        SetTypesEnumMasterpiece SetTypesEnum = "masterpiece"
                // SetTypesEnumMasters ...
        SetTypesEnumMasters SetTypesEnum = "masters"
                // SetTypesEnumMemorabilia ...
        SetTypesEnumMemorabilia SetTypesEnum = "memorabilia"
                // SetTypesEnumPlanechase ...
        SetTypesEnumPlanechase SetTypesEnum = "planechase"
                // SetTypesEnumPremiumDeck ...
        SetTypesEnumPremiumDeck SetTypesEnum = "premium_deck"
                // SetTypesEnumPromo ...
        SetTypesEnumPromo SetTypesEnum = "promo"
                // SetTypesEnumSpellbook ...
        SetTypesEnumSpellbook SetTypesEnum = "spellbook"
                // SetTypesEnumStarter ...
        SetTypesEnumStarter SetTypesEnum = "starter"
                // SetTypesEnumToken ...
        SetTypesEnumToken SetTypesEnum = "token"
                // SetTypesEnumTreasureChest ...
        SetTypesEnumTreasureChest SetTypesEnum = "treasure_chest"
                // SetTypesEnumVanguard ...
        SetTypesEnumVanguard SetTypesEnum = "vanguard"
            )
    // PossibleSetTypesEnumValues returns an array of possible values for the SetTypesEnum const type.
    func PossibleSetTypesEnumValues() []SetTypesEnum {
        return []SetTypesEnum{SetTypesEnumArchenemy,SetTypesEnumBox,SetTypesEnumCommander,SetTypesEnumConspiracy,SetTypesEnumCore,SetTypesEnumDuelDeck,SetTypesEnumExpansion,SetTypesEnumFromTheVault,SetTypesEnumFunny,SetTypesEnumMasterpiece,SetTypesEnumMasters,SetTypesEnumMemorabilia,SetTypesEnumPlanechase,SetTypesEnumPremiumDeck,SetTypesEnumPromo,SetTypesEnumSpellbook,SetTypesEnumStarter,SetTypesEnumToken,SetTypesEnumTreasureChest,SetTypesEnumVanguard}
    }

        // SortDirectionEnum enumerates the values for sort direction enum.
    type SortDirectionEnum string

    const (
                // Asc ...
        Asc SortDirectionEnum = "asc"
                // Auto ...
        Auto SortDirectionEnum = "auto"
                // Desc ...
        Desc SortDirectionEnum = "desc"
            )
    // PossibleSortDirectionEnumValues returns an array of possible values for the SortDirectionEnum const type.
    func PossibleSortDirectionEnumValues() []SortDirectionEnum {
        return []SortDirectionEnum{Asc,Auto,Desc}
    }

        // SortOrderEnum enumerates the values for sort order enum.
    type SortOrderEnum string

    const (
                // Artist ...
        Artist SortOrderEnum = "artist"
                // Cmc ...
        Cmc SortOrderEnum = "cmc"
                // Color ...
        Color SortOrderEnum = "color"
                // Edhrec ...
        Edhrec SortOrderEnum = "edhrec"
                // Eur ...
        Eur SortOrderEnum = "eur"
                // Name ...
        Name SortOrderEnum = "name"
                // Power ...
        Power SortOrderEnum = "power"
                // Rarity ...
        Rarity SortOrderEnum = "rarity"
                // Released ...
        Released SortOrderEnum = "released"
                // Set ...
        Set SortOrderEnum = "set"
                // Tix ...
        Tix SortOrderEnum = "tix"
                // Toughness ...
        Toughness SortOrderEnum = "toughness"
                // Usd ...
        Usd SortOrderEnum = "usd"
            )
    // PossibleSortOrderEnumValues returns an array of possible values for the SortOrderEnum const type.
    func PossibleSortOrderEnumValues() []SortOrderEnum {
        return []SortOrderEnum{Artist,Cmc,Color,Edhrec,Eur,Name,Power,Rarity,Released,Set,Tix,Toughness,Usd}
    }

        // UniqueStrategyEnum enumerates the values for unique strategy enum.
    type UniqueStrategyEnum string

    const (
                // Art ...
        Art UniqueStrategyEnum = "art"
                // Cards ...
        Cards UniqueStrategyEnum = "cards"
                // Prints ...
        Prints UniqueStrategyEnum = "prints"
            )
    // PossibleUniqueStrategyEnumValues returns an array of possible values for the UniqueStrategyEnum const type.
    func PossibleUniqueStrategyEnumValues() []UniqueStrategyEnum {
        return []UniqueStrategyEnum{Art,Cards,Prints}
    }

    // CardFaceType ...
    type CardFaceType struct {
    Name *string `json:"name,omitempty"`
    TypeLine *string `json:"type_line,omitempty"`
    OracleText *string `json:"oracle_text,omitempty"`
    ManaCost *string `json:"mana_cost,omitempty"`
    // Colors - Possible values include: 'W', 'U', 'B', 'R', 'G'
    Colors ColorsEnum `json:"colors,omitempty"`
    // ColorIndicator - Possible values include: 'W', 'U', 'B', 'R', 'G'
    ColorIndicator ColorsEnum `json:"color_indicator,omitempty"`
    Power *string `json:"power,omitempty"`
    Toughness *string `json:"toughness,omitempty"`
    Loyalty *string `json:"loyalty,omitempty"`
    FlavorText *string `json:"flavor_text,omitempty"`
    IllustrationID *uuid.UUID `json:"illustration_id,omitempty"`
    ImageUris *ImageURIType `json:"image_uris,omitempty"`
    }

    // CardListType ...
    type CardListType struct {
    autorest.Response `json:"-"`
    TotalCards *int32 `json:"total_cards,omitempty"`
    HasMore *bool `json:"has_more,omitempty"`
    NextPage *string `json:"next_page,omitempty"`
    Data *[]CardType `json:"data,omitempty"`
    }

    // CardSymbolListType ...
    type CardSymbolListType struct {
    autorest.Response `json:"-"`
    Data *[]CardSymbolType `json:"data,omitempty"`
    }

    // CardSymbolType ...
    type CardSymbolType struct {
    Symbol *string `json:"symbol,omitempty"`
    LooseVariant *string `json:"loose_variant,omitempty"`
    English *string `json:"english,omitempty"`
    Transposable *bool `json:"transposable,omitempty"`
    RepresentsMana *bool `json:"represents_mana,omitempty"`
    Cmc *float64 `json:"cmc,omitempty"`
    AppearsInManaCosts *bool `json:"appears_in_mana_costs,omitempty"`
    Funny *bool `json:"funny,omitempty"`
    // Colors - Possible values include: 'W', 'U', 'B', 'R', 'G'
    Colors ColorsEnum `json:"colors,omitempty"`
    }

    // CardType ...
    type CardType struct {
    autorest.Response `json:"-"`
    ID *uuid.UUID `json:"id,omitempty"`
    OracleID *uuid.UUID `json:"oracle_id,omitempty"`
    MultiverseIds *[]int32 `json:"multiverse_ids,omitempty"`
    MtgoID *int32 `json:"mtgo_id,omitempty"`
    MtgoFoilID *int32 `json:"mtgo_foil_id,omitempty"`
    URI *string `json:"uri,omitempty"`
    ScryfallURI *string `json:"scryfall_uri,omitempty"`
    PrintsSearchURI *string `json:"prints_search_uri,omitempty"`
    RulingsURI *string `json:"rulings_uri,omitempty"`
    Name *string `json:"name,omitempty"`
    // Layout - Possible values include: 'Normal', 'Split', 'Transform', 'Meld', 'Leveler', 'Saga', 'Planar', 'Scheme', 'Vanguard', 'Token', 'DoubleFacedToken', 'Emblem', 'Augment', 'Host'
    Layout LayoutsEnum `json:"layout,omitempty"`
    Cmc *float64 `json:"cmc,omitempty"`
    TypeLine *string `json:"type_line,omitempty"`
    OracleText *string `json:"oracle_text,omitempty"`
    ManaCost *string `json:"mana_cost,omitempty"`
    Power *string `json:"power,omitempty"`
    Toughness *string `json:"toughness,omitempty"`
    Loyalty *string `json:"loyalty,omitempty"`
    LifeModifier *string `json:"life_modifier,omitempty"`
    HandModifier *string `json:"hand_modifier,omitempty"`
    Colors *[]ColorsEnum `json:"colors,omitempty"`
    ColorIndicator *[]ColorsEnum `json:"color_indicator,omitempty"`
    ColorIdentity *[]ColorsEnum `json:"color_identity,omitempty"`
    AllParts *RelatedCardsType `json:"all_parts,omitempty"`
    CardFaces *[]CardFaceType `json:"card_faces,omitempty"`
    Legalities *LegalityType `json:"legalities,omitempty"`
    Reserved *bool `json:"reserved,omitempty"`
    EdhrecRank *int32 `json:"edhrec_rank,omitempty"`
    Set *string `json:"set,omitempty"`
    SetName *string `json:"set_name,omitempty"`
    CollectorNumber *string `json:"collector_number,omitempty"`
    SetSearchURI *string `json:"set_search_uri,omitempty"`
    ScryfallSetURI *string `json:"scryfall_set_uri,omitempty"`
    ImageUris *ImageURIType `json:"image_uris,omitempty"`
    HighresImage *bool `json:"highres_image,omitempty"`
    Reprint *bool `json:"reprint,omitempty"`
    Digital *bool `json:"digital,omitempty"`
    // Rarity - Possible values include: 'Common', 'Uncommon', 'Rare', 'Mythic'
    Rarity RarityEnum `json:"rarity,omitempty"`
    FlavorText *string `json:"flavor_text,omitempty"`
    Artist *string `json:"artist,omitempty"`
    IllustrationID *uuid.UUID `json:"illustration_id,omitempty"`
    Frame *string `json:"frame,omitempty"`
    FullArt *bool `json:"full_art,omitempty"`
    Watermark *string `json:"watermark,omitempty"`
    // BorderColor - Possible values include: 'Black', 'Borderless', 'Gold', 'Silver', 'White'
    BorderColor BorderColorsEnum `json:"border_color,omitempty"`
    StorySpotlightNumber *int32 `json:"story_spotlight_number,omitempty"`
    StorySpotlightURI *string `json:"story_spotlight_uri,omitempty"`
    Timeshifted *bool `json:"timeshifted,omitempty"`
    Colorshifted *bool `json:"colorshifted,omitempty"`
    Futureshifted *bool `json:"futureshifted,omitempty"`
    PurchaseUris map[string]*string `json:"purchase_uris"`
    RelatedUris map[string]*string `json:"related_uris"`
    }

        // MarshalJSON is the custom marshaler for CardType.
        func (ct CardType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ct.ID != nil) {
                objectMap["id"] = ct.ID
                }
                if(ct.OracleID != nil) {
                objectMap["oracle_id"] = ct.OracleID
                }
                if(ct.MultiverseIds != nil) {
                objectMap["multiverse_ids"] = ct.MultiverseIds
                }
                if(ct.MtgoID != nil) {
                objectMap["mtgo_id"] = ct.MtgoID
                }
                if(ct.MtgoFoilID != nil) {
                objectMap["mtgo_foil_id"] = ct.MtgoFoilID
                }
                if(ct.URI != nil) {
                objectMap["uri"] = ct.URI
                }
                if(ct.ScryfallURI != nil) {
                objectMap["scryfall_uri"] = ct.ScryfallURI
                }
                if(ct.PrintsSearchURI != nil) {
                objectMap["prints_search_uri"] = ct.PrintsSearchURI
                }
                if(ct.RulingsURI != nil) {
                objectMap["rulings_uri"] = ct.RulingsURI
                }
                if(ct.Name != nil) {
                objectMap["name"] = ct.Name
                }
                if(ct.Layout != "") {
                objectMap["layout"] = ct.Layout
                }
                if(ct.Cmc != nil) {
                objectMap["cmc"] = ct.Cmc
                }
                if(ct.TypeLine != nil) {
                objectMap["type_line"] = ct.TypeLine
                }
                if(ct.OracleText != nil) {
                objectMap["oracle_text"] = ct.OracleText
                }
                if(ct.ManaCost != nil) {
                objectMap["mana_cost"] = ct.ManaCost
                }
                if(ct.Power != nil) {
                objectMap["power"] = ct.Power
                }
                if(ct.Toughness != nil) {
                objectMap["toughness"] = ct.Toughness
                }
                if(ct.Loyalty != nil) {
                objectMap["loyalty"] = ct.Loyalty
                }
                if(ct.LifeModifier != nil) {
                objectMap["life_modifier"] = ct.LifeModifier
                }
                if(ct.HandModifier != nil) {
                objectMap["hand_modifier"] = ct.HandModifier
                }
                if(ct.Colors != nil) {
                objectMap["colors"] = ct.Colors
                }
                if(ct.ColorIndicator != nil) {
                objectMap["color_indicator"] = ct.ColorIndicator
                }
                if(ct.ColorIdentity != nil) {
                objectMap["color_identity"] = ct.ColorIdentity
                }
                if(ct.AllParts != nil) {
                objectMap["all_parts"] = ct.AllParts
                }
                if(ct.CardFaces != nil) {
                objectMap["card_faces"] = ct.CardFaces
                }
                if(ct.Legalities != nil) {
                objectMap["legalities"] = ct.Legalities
                }
                if(ct.Reserved != nil) {
                objectMap["reserved"] = ct.Reserved
                }
                if(ct.EdhrecRank != nil) {
                objectMap["edhrec_rank"] = ct.EdhrecRank
                }
                if(ct.Set != nil) {
                objectMap["set"] = ct.Set
                }
                if(ct.SetName != nil) {
                objectMap["set_name"] = ct.SetName
                }
                if(ct.CollectorNumber != nil) {
                objectMap["collector_number"] = ct.CollectorNumber
                }
                if(ct.SetSearchURI != nil) {
                objectMap["set_search_uri"] = ct.SetSearchURI
                }
                if(ct.ScryfallSetURI != nil) {
                objectMap["scryfall_set_uri"] = ct.ScryfallSetURI
                }
                if(ct.ImageUris != nil) {
                objectMap["image_uris"] = ct.ImageUris
                }
                if(ct.HighresImage != nil) {
                objectMap["highres_image"] = ct.HighresImage
                }
                if(ct.Reprint != nil) {
                objectMap["reprint"] = ct.Reprint
                }
                if(ct.Digital != nil) {
                objectMap["digital"] = ct.Digital
                }
                if(ct.Rarity != "") {
                objectMap["rarity"] = ct.Rarity
                }
                if(ct.FlavorText != nil) {
                objectMap["flavor_text"] = ct.FlavorText
                }
                if(ct.Artist != nil) {
                objectMap["artist"] = ct.Artist
                }
                if(ct.IllustrationID != nil) {
                objectMap["illustration_id"] = ct.IllustrationID
                }
                if(ct.Frame != nil) {
                objectMap["frame"] = ct.Frame
                }
                if(ct.FullArt != nil) {
                objectMap["full_art"] = ct.FullArt
                }
                if(ct.Watermark != nil) {
                objectMap["watermark"] = ct.Watermark
                }
                if(ct.BorderColor != "") {
                objectMap["border_color"] = ct.BorderColor
                }
                if(ct.StorySpotlightNumber != nil) {
                objectMap["story_spotlight_number"] = ct.StorySpotlightNumber
                }
                if(ct.StorySpotlightURI != nil) {
                objectMap["story_spotlight_uri"] = ct.StorySpotlightURI
                }
                if(ct.Timeshifted != nil) {
                objectMap["timeshifted"] = ct.Timeshifted
                }
                if(ct.Colorshifted != nil) {
                objectMap["colorshifted"] = ct.Colorshifted
                }
                if(ct.Futureshifted != nil) {
                objectMap["futureshifted"] = ct.Futureshifted
                }
                if(ct.PurchaseUris != nil) {
                objectMap["purchase_uris"] = ct.PurchaseUris
                }
                if(ct.RelatedUris != nil) {
                objectMap["related_uris"] = ct.RelatedUris
                }
                return json.Marshal(objectMap)
        }

    // CatalogType ...
    type CatalogType struct {
    autorest.Response `json:"-"`
    TotalItems *int32 `json:"total_items,omitempty"`
    Data *[]string `json:"data,omitempty"`
    }

    // ErrorType ...
    type ErrorType struct {
    Status *int32 `json:"status,omitempty"`
    Code *string `json:"code,omitempty"`
    Details *string `json:"details,omitempty"`
    Type *string `json:"type,omitempty"`
    Warnings *[]string `json:"warnings,omitempty"`
    }

    // ImageURIType ...
    type ImageURIType struct {
    Small *string `json:"small,omitempty"`
    Normal *string `json:"normal,omitempty"`
    Large *string `json:"large,omitempty"`
    Png *string `json:"png,omitempty"`
    ArtCrop *string `json:"art_crop,omitempty"`
    BorderCrop *string `json:"border_crop,omitempty"`
    }

    // LegalityType ...
    type LegalityType struct {
    // Standard - Possible values include: 'Legal', 'NotLegal'
    Standard LegalStatusEnum `json:"standard,omitempty"`
    // Future - Possible values include: 'Legal', 'NotLegal'
    Future LegalStatusEnum `json:"future,omitempty"`
    // Frontier - Possible values include: 'Legal', 'NotLegal'
    Frontier LegalStatusEnum `json:"frontier,omitempty"`
    // Modern - Possible values include: 'Legal', 'NotLegal'
    Modern LegalStatusEnum `json:"modern,omitempty"`
    // Legacy - Possible values include: 'Legal', 'NotLegal'
    Legacy LegalStatusEnum `json:"legacy,omitempty"`
    // Pauper - Possible values include: 'Legal', 'NotLegal'
    Pauper LegalStatusEnum `json:"pauper,omitempty"`
    // Vintage - Possible values include: 'Legal', 'NotLegal'
    Vintage LegalStatusEnum `json:"vintage,omitempty"`
    // Penny - Possible values include: 'Legal', 'NotLegal'
    Penny LegalStatusEnum `json:"penny,omitempty"`
    // Commander - Possible values include: 'Legal', 'NotLegal'
    Commander LegalStatusEnum `json:"commander,omitempty"`
    // OnevOne - Possible values include: 'Legal', 'NotLegal'
    OnevOne LegalStatusEnum `json:"1v1,omitempty"`
    // Duel - Possible values include: 'Legal', 'NotLegal'
    Duel LegalStatusEnum `json:"duel,omitempty"`
    // Brawl - Possible values include: 'Legal', 'NotLegal'
    Brawl LegalStatusEnum `json:"brawl,omitempty"`
    }

    // ManaCostType ...
    type ManaCostType struct {
    autorest.Response `json:"-"`
    Cost *string `json:"cost,omitempty"`
    Cmc *float64 `json:"cmc,omitempty"`
    // Colors - Possible values include: 'W', 'U', 'B', 'R', 'G'
    Colors ColorsEnum `json:"colors,omitempty"`
    Colorless *bool `json:"colorless,omitempty"`
    Monocolored *bool `json:"monocolored,omitempty"`
    Multicolored *bool `json:"multicolored,omitempty"`
    }

    // RelatedCardsType ...
    type RelatedCardsType struct {
    ID *uuid.UUID `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    URI *string `json:"uri,omitempty"`
    }

    // RulingListType ...
    type RulingListType struct {
    autorest.Response `json:"-"`
    Data *[]RulingType `json:"data,omitempty"`
    }

    // RulingType ...
    type RulingType struct {
    Source *string `json:"source,omitempty"`
    PublishedAt *date.Date `json:"published_at,omitempty"`
    Comment *string `json:"comment,omitempty"`
    }

    // SetListType ...
    type SetListType struct {
    autorest.Response `json:"-"`
    Data *[]SetType `json:"data,omitempty"`
    }

    // SetType ...
    type SetType struct {
    autorest.Response `json:"-"`
    Code *string `json:"code,omitempty"`
    MtgoCode *string `json:"mtgo_code,omitempty"`
    Name *string `json:"name,omitempty"`
    // SetType - Possible values include: 'SetTypesEnumCore', 'SetTypesEnumExpansion', 'SetTypesEnumMasters', 'SetTypesEnumMasterpiece', 'SetTypesEnumFromTheVault', 'SetTypesEnumSpellbook', 'SetTypesEnumPremiumDeck', 'SetTypesEnumDuelDeck', 'SetTypesEnumCommander', 'SetTypesEnumPlanechase', 'SetTypesEnumConspiracy', 'SetTypesEnumArchenemy', 'SetTypesEnumVanguard', 'SetTypesEnumFunny', 'SetTypesEnumStarter', 'SetTypesEnumBox', 'SetTypesEnumPromo', 'SetTypesEnumToken', 'SetTypesEnumMemorabilia', 'SetTypesEnumTreasureChest'
    SetType SetTypesEnum `json:"set_type,omitempty"`
    ReleasedAt *date.Date `json:"released_at,omitempty"`
    BlockCode *string `json:"block_code,omitempty"`
    Block *string `json:"block,omitempty"`
    ParentSetCode *string `json:"parent_set_code,omitempty"`
    CardCount *int32 `json:"card_count,omitempty"`
    Digital *bool `json:"digital,omitempty"`
    Foil *bool `json:"foil,omitempty"`
    IconSvgURI *string `json:"icon_svg_uri,omitempty"`
    SearchURI *string `json:"search_uri,omitempty"`
    }

