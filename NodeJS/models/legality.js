/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a Legality.
 */
class Legality {
  /**
   * Create a Legality.
   * @member {string} [standard] Possible values include: 'legal', 'not_legal'
   * @member {string} [future] Possible values include: 'legal', 'not_legal'
   * @member {string} [frontier] Possible values include: 'legal', 'not_legal'
   * @member {string} [modern] Possible values include: 'legal', 'not_legal'
   * @member {string} [legacy] Possible values include: 'legal', 'not_legal'
   * @member {string} [pauper] Possible values include: 'legal', 'not_legal'
   * @member {string} [vintage] Possible values include: 'legal', 'not_legal'
   * @member {string} [penny] Possible values include: 'legal', 'not_legal'
   * @member {string} [commander] Possible values include: 'legal', 'not_legal'
   * @member {string} [onevOne] Possible values include: 'legal', 'not_legal'
   * @member {string} [duel] Possible values include: 'legal', 'not_legal'
   * @member {string} [brawl] Possible values include: 'legal', 'not_legal'
   */
  constructor() {
  }

  /**
   * Defines the metadata of Legality
   *
   * @returns {object} metadata of Legality
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'legality',
      type: {
        name: 'Composite',
        className: 'Legality',
        modelProperties: {
          standard: {
            required: false,
            serializedName: 'standard',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          future: {
            required: false,
            serializedName: 'future',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          frontier: {
            required: false,
            serializedName: 'frontier',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          modern: {
            required: false,
            serializedName: 'modern',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          legacy: {
            required: false,
            serializedName: 'legacy',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          pauper: {
            required: false,
            serializedName: 'pauper',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          vintage: {
            required: false,
            serializedName: 'vintage',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          penny: {
            required: false,
            serializedName: 'penny',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          commander: {
            required: false,
            serializedName: 'commander',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          onevOne: {
            required: false,
            serializedName: '1v1',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          duel: {
            required: false,
            serializedName: 'duel',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          },
          brawl: {
            required: false,
            serializedName: 'brawl',
            type: {
              name: 'Enum',
              allowedValues: [ 'legal', 'not_legal' ]
            }
          }
        }
      }
    };
  }
}

module.exports = Legality;
