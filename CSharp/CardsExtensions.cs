// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Scryfall.API
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Cards.
    /// </summary>
    public static partial class CardsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            public static IList<Card> GetAll(this ICards operations, int? page = default(int?))
            {
                return operations.GetAllAsync(page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Card>> GetAllAsync(this ICards operations, int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// </param>
            /// <param name='unique'>
            /// Possible values include: 'cards', 'art', 'prints'
            /// </param>
            /// <param name='order'>
            /// Possible values include: 'name', 'set', 'rarity', 'color', 'usd', 'tix',
            /// 'eur', 'cmc', 'power', 'toughness', 'edhrec', 'artist'
            /// </param>
            /// <param name='dir'>
            /// Possible values include: 'auto', 'asc', 'desc'
            /// </param>
            /// <param name='includeExtras'>
            /// </param>
            /// <param name='page'>
            /// </param>
            public static List Search(this ICards operations, string q = default(string), string unique = default(string), string order = default(string), string dir = default(string), bool? includeExtras = default(bool?), int? page = default(int?))
            {
                return operations.SearchAsync(q, unique, order, dir, includeExtras, page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// </param>
            /// <param name='unique'>
            /// Possible values include: 'cards', 'art', 'prints'
            /// </param>
            /// <param name='order'>
            /// Possible values include: 'name', 'set', 'rarity', 'color', 'usd', 'tix',
            /// 'eur', 'cmc', 'power', 'toughness', 'edhrec', 'artist'
            /// </param>
            /// <param name='dir'>
            /// Possible values include: 'auto', 'asc', 'desc'
            /// </param>
            /// <param name='includeExtras'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<List> SearchAsync(this ICards operations, string q = default(string), string unique = default(string), string order = default(string), string dir = default(string), bool? includeExtras = default(bool?), int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(q, unique, order, dir, includeExtras, page, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exact'>
            /// </param>
            /// <param name='fuzzy'>
            /// </param>
            /// <param name='set'>
            /// </param>
            /// <param name='format'>
            /// </param>
            /// <param name='face'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='pretty'>
            /// </param>
            public static Card GetNamed(this ICards operations, string exact = default(string), string fuzzy = default(string), string set = default(string), string format = default(string), string face = default(string), string version = default(string), bool? pretty = default(bool?))
            {
                return operations.GetNamedAsync(exact, fuzzy, set, format, face, version, pretty).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exact'>
            /// </param>
            /// <param name='fuzzy'>
            /// </param>
            /// <param name='set'>
            /// </param>
            /// <param name='format'>
            /// </param>
            /// <param name='face'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='pretty'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Card> GetNamedAsync(this ICards operations, string exact = default(string), string fuzzy = default(string), string set = default(string), string format = default(string), string face = default(string), string version = default(string), bool? pretty = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNamedWithHttpMessagesAsync(exact, fuzzy, set, format, face, version, pretty, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// </param>
            public static Catalog Autocomplete(this ICards operations, string q = default(string))
            {
                return operations.AutocompleteAsync(q).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Catalog> AutocompleteAsync(this ICards operations, string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AutocompleteWithHttpMessagesAsync(q, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Card GetRandom(this ICards operations)
            {
                return operations.GetRandomAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Card> GetRandomAsync(this ICards operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRandomWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Card GetByMultiverseId(this ICards operations, int id)
            {
                return operations.GetByMultiverseIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Card> GetByMultiverseIdAsync(this ICards operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByMultiverseIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Card GetByMtgoId(this ICards operations, int id)
            {
                return operations.GetByMtgoIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Card> GetByMtgoIdAsync(this ICards operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByMtgoIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='number'>
            /// </param>
            public static Card GetByCodeByNumber(this ICards operations, string code, int number)
            {
                return operations.GetByCodeByNumberAsync(code, number).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Card> GetByCodeByNumberAsync(this ICards operations, string code, int number, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCodeByNumberWithHttpMessagesAsync(code, number, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Card GetById(this ICards operations, System.Guid id)
            {
                return operations.GetByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Card> GetByIdAsync(this ICards operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
